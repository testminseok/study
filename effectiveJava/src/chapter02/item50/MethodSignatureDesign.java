package chapter02.item50;

import java.util.HashMap;

public class MethodSignatureDesign {

    /*
    * 메서드 이름을 신중히 짓자.
    * 항상 표준 명명 규칙을 따라야 한다. 이해할 수 있고, 같은 패키지에 속한 다른 이름들과 일관되게 짓는게 최우선 목표다.
    * 그 다음 목표는 개발자 커뮤니티에서 널리 받아들여지는 이름을 사용하는 것이다. 긴 이름은 피하자.
    * 애매하면 자바 라이브러리 API 가이드를 참조하라
    * */
    public static void lgtm() {
        System.out.println("Looks good to me!");
    }

    /*
    * 편의 메서드를 너무 많이 만들지말자.
    * 모든 메서드는 각각 자신의 소임을 다해야 한다. 메서드가 너무 많은 클래스는 익히고, 사용하고, 문서화하고, 테스트하고, 유지보수하기 어렵다.
    * 인터페이스도 마찬가지다 메서드가 너무 많으면 이를 구현하는 사람과 사용하는 사람 모두를 고통스럽게한다.
    * 클래스나 인터페이스는 자신의 각 기능을 완벽히 수행하는 메서드로 제공해야 한다.
    * 아주 자주 쓰일 경우에만 별도의 약칭 메서드를 두기 바란다. 확신이 서지 않으면 만들지말자.
    * */
    public static void helperMethod() {
        System.out.println("helperMethod");
    }

    public static void helperMethod2() {
        System.out.println("helperMethod");
    }

    /*
    * 매개변수 목록은 짧게 유지하자. 4개 이하가 좋다. 일단 4개가 넘어가면 매개변수를 전부 기억하기가 쉽지 않다.
    * 만든 API에 이 제한을 넘는 메서드가 많다면 프로그래머들은 API 문서를 옆에 끼고 개발해야 할 것이다.
    * 같은 타입의 매개변수 여러 개가 연달아 나오는 경우가 특히 해롭다.
    * 
    * 긴 매개변수 목록을 짧게 줄이는법
    * 1. 여러 메서드로 쪼갠다.
    *   - 쪼개진 메서드 각각은 원래 매개변수 목록의 부분집합을 받는다. 잘못하면 메서드가 너무 많아질 수 있지만, 직교성을 높여
    *     오히려 메서드 수를 줄여주는 효과도 있다.
    * 2. 매개변수 여러 개를 묶어주는 도우미 클래스를 만든다.
    *   - 일반적으로 이런 도우미 클래스는 정적 멤버 클래스로 둔다. 특히 잇따른 매개변수 몇개를 독립된 하나의 개념으로 볼수 있을 때 추천한다.
    * 3. 앞서의 두 기법을 혼합한 것으로, 객체 생성에 사용한 빌더 패턴을 메서드 호출에 응용한다.
    *   - 이 기법은 매개변수가 많을 때 , 특히 그중 일부는 생략해도 괜찮을 때 도움이 된다. 먼저 모든 매개변수를 하나로 추상화한 객체를 정의하고
    *     클라이언트에서 이 객체의 세터 메서드를 호출해 필요한 값을 설정하게 한다. 클라이언트는 먼저 필요한 매개변수를 다 설정한 다음
    *     execute 메서드를 호출해 앞서 설정한 매개변수들의 유효성을 검사한다. 성정이 완료된 객체를 넘겨 원하는 계산을 수행한다.
    *
    * */
    public static void doSomething(int a, double b, String c, boolean d, float e, long f, char g, byte h, short i) {

    }

    /*
    * 매개변수의 타입으로는 클래스보다는 인터페이스가 더 낫다. 매개변수로 접합한 인터페이스가 있다면 인터페이스를 직접 사용하자.
    * */
    public static void parameterInterface(HashMap<String, Object> map) {

    }

    /*
    * boolean 보다는 원소 2개짜리 열거 타입이 낫다.
    * 열거 타입을 사용하면 코드를 읽고 쓰기가 더 쉬워진다. 나중에 선택지를 추가하기도 쉽다.
    * */
    public static void booleanParameter(boolean b) {

    }
}
